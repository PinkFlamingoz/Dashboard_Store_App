using Dashboard_Store_App.Models;
using Microsoft.Extensions.Configuration;
using System.Diagnostics;

namespace Dashboard_Store_App
{
    public partial class Form1 : Form
    {
        // The `Dashboard_Model` object holds the data to be displayed in the form.
        // This model object is populated by calling methods that fetch data from a database.
        private readonly Dashboard_Model dashboard_model;

        // Variables

        // Keeping track of the last clicked button
        private Button clicked_button;

        // Number of days selected for the date range
        private int date_range;

        // Constructor
        public Form1()
        {
            // `InitializeComponent()` is a method automatically generated by the Windows Forms designer.
            // It initializes the form and its controls based on the settings in the designer.
            InitializeComponent();

            // Setting the default start date to be 7 days ago and end date to be now
            date_time_picker_start.Value = DateTime.Today.AddDays(-7);
            date_time_picker_end.Value = DateTime.Now;
            date_range = 7;
            button_last_7_days.Select();
            Set_Button_Color(button_last_7_days);

            // Creating a configuration builder to read from the "appsettings.json" file
            var builder = new ConfigurationBuilder()
                   .SetBasePath(Directory.GetCurrentDirectory())
                   .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
            IConfiguration configuration = builder.Build();

            // Creating a new `Dashboard_Model` using the configuration just created
            dashboard_model = new Dashboard_Model(configuration);

            // Load data onto the dashboard
            _ = Load_Data_On_Dashboard();
        }

        // This is an asynchronous method for loading data onto the dashboard.
        // It fetches data from the database and updates the form's controls.
        private async Task Load_Data_On_Dashboard()
        {
            try
            {
                Disable_Buttons();

                // Calculate previous period dates based on current period dates and date_range
                DateTime previous_start_date = date_time_picker_start.Value.AddDays(-date_range);
                DateTime previous_end_date = date_time_picker_end.Value.AddDays(-date_range);

                // Checking if new data is available and if so, updating the `Dashboard_Model`
                bool set_data = await dashboard_model.Load_Data(date_time_picker_start.Value, date_time_picker_end.Value, previous_start_date, previous_end_date);

                // Update UI if new data is available
                if (set_data)
                {
                    //label_orders_number.Text = $"{dashboard_model.Number_of_orders}";
                    //label_total_revenue_number.Text = $"€{dashboard_model.Total_revenue}";
                    //label_total_profit_number.Text = $"€{dashboard_model.Total_profit}";
                    label_customers_number.Text = $"{dashboard_model.Number_of_customers}";
                    label_suppliers_number.Text = $"{dashboard_model.Number_of_suppliers}";
                    label_product_number.Text = $"{dashboard_model.Number_of_products}";

                    // Updating the labels in the form with the data from the `Dashboard_Model`
                    Animate_Counting(label_orders_number, dashboard_model.Number_of_orders);
                    Animate_Counting(label_total_revenue_number, (int)dashboard_model.Total_revenue, "€");
                    Animate_Counting(label_total_profit_number, (int)dashboard_model.Total_profit, "€");
                    //Animate_Counting(label_customers_number, dashboard_model.Number_of_customers);
                    //Animate_Counting(label_suppliers_number, dashboard_model.Number_of_suppliers);
                    //Animate_Counting(label_product_number, dashboard_model.Number_of_products);

                    // Updating charts and data grids with the data from the `Dashboard_Model`
                    chart_gross_revenue.DataSource = dashboard_model.Gross_revenue;
                    chart_gross_revenue.Series[0].XValueMember = "Date";
                    chart_gross_revenue.Series[0].YValueMembers = "Total_Amount";
                    chart_gross_revenue.DataBind();

                    chart_top_products.DataSource = dashboard_model.Top_products;
                    chart_top_products.Series[0].XValueMember = "Key";
                    chart_top_products.Series[0].YValueMembers = "Value";
                    chart_top_products.DataBind();

                    dataGridView_low_stock.DataSource = dashboard_model.Low_stock_products;
                    dataGridView_low_stock.Columns[0].HeaderText = "Items";
                    dataGridView_low_stock.Columns[1].HeaderText = "Units";

                    // Calculate the percent changes
                    double orders_change = dashboard_model.Previous_number_of_orders != 0 ?
                                           Math.Round(((double)(dashboard_model.Number_of_orders - dashboard_model.Previous_number_of_orders) / (double)dashboard_model.Previous_number_of_orders) * 100, 2) :
                                           Double.PositiveInfinity;

                    double revenue_change = dashboard_model.Previous_total_revenue != 0 ?
                                             Math.Round(((double)(dashboard_model.Total_revenue - dashboard_model.Previous_total_revenue) / (double)dashboard_model.Previous_total_revenue) * 100, 2) :
                                             Double.PositiveInfinity;

                    double profit_change = dashboard_model.Previous_total_profit != 0 ?
                                            Math.Round(((double)(dashboard_model.Total_profit - dashboard_model.Previous_total_profit) / (double)dashboard_model.Previous_total_profit) * 100, 2) :
                                             Double.PositiveInfinity;

                    // Updating the labels for the previous period
                    label_previous_orders_number.Text = $"{orders_change}%";
                    label_previous_total_revenue_number.Text = $"{revenue_change}%";
                    label_previous_total_profit_number.Text = $"{profit_change}%";

                    Enable_Buttons();

                    Console.WriteLine("VIEW LOADED");
                }
                else
                {
                    Enable_Buttons();

                    Console.WriteLine("SAME VIEW");
                }
            }
            catch (Exception ex)
            {
                Enable_Buttons();

                // If an exception is thrown during the loading of data, this catch block will catch it and write out a message to the console.
                Console.WriteLine($"Error loading data: {ex.Message}");
            }
        }

        // Disable buttons if load takes too long
        private void Disable_Buttons()
        {
            button_custom_date.Enabled = false;
            button_set_dates.Enabled = false;
            button_last_30_days.Enabled = false;
            button_this_month.Enabled = false;
            button_last_7_days.Enabled = false;
            button_previous.Enabled = false;
            button_today.Enabled = false;
        }

        // Enable the buttons after the load is done
        private void Enable_Buttons()
        {
            button_custom_date.Enabled = true;
            button_set_dates.Enabled = true;
            button_last_30_days.Enabled = true;
            button_this_month.Enabled = true;
            button_last_7_days.Enabled = true;
            button_previous.Enabled = true;
            button_today.Enabled = true;
        }

        // Animate the count effect
        private static void Animate_Counting(Label label, int target_number, string prefix = "", string postfix = "", int total_time_in_seconds = 3)
        {
            double current_number = 0;
            double increment_step;

            var stopwatch = Stopwatch.StartNew();
            var lock_object = new object();

            // Create timer instance
            var timer = new System.Windows.Forms.Timer
            {
                Interval = 10 // With an interval of 10ms
            };

            // Event handler for timer tick
            timer.Tick += (s, e) =>
            {
                // lock to ensure only one instance of the timer's Tick event is running at a time
                lock (lock_object)
                {
                    var elapsed = stopwatch.Elapsed.TotalSeconds;
                    increment_step = (target_number - current_number) / (total_time_in_seconds - elapsed);

                    // Slowdown effect when 80% of the time has passed
                    if (elapsed >= total_time_in_seconds * 0.8)
                    {
                        increment_step *= 0.99; // Reduce step size
                    }

                    current_number += increment_step;
                    if (elapsed >= total_time_in_seconds || current_number >= target_number)
                    {
                        // Reached the target number or time, stop the timer
                        current_number = target_number;
                        timer.Stop();
                        stopwatch.Stop();
                    }

                    // Display the current number in the element
                    label.Text = $"{prefix}{Math.Round(current_number)}{postfix}";
                }
            };

            // Start timer
            timer.Start();
        }

        // Change the color of the clicked button and revert the color of the previous clicked button.
        // Change the color of labels when the custom date button is clicked.
        private void Set_Button_Color(object button)
        {
            // The button object is cast to a Button type so its properties can be accessed.
            var btn = (Button)button;

            // Set the background color of the button to match the border color of the custom date button
            btn.BackColor = button_custom_date.FlatAppearance.BorderColor;

            // Set the text color of the button to a specific color (167, 209, 41)
            btn.ForeColor = Color.FromArgb(167, 209, 41);

            // Check if there is a previously clicked button and it's not the current one
            if (clicked_button != null && clicked_button != btn)
            {
                // Check if the previously clicked button was the set dates button
                if (clicked_button == button_set_dates)
                {
                    // If so, set its background color to (167, 209, 41) and its text color to black
                    clicked_button.BackColor = Color.FromArgb(167, 209, 41);
                    clicked_button.ForeColor = Color.Black;
                }
                else
                {
                    // If the previously clicked button was not the set dates button, set its background color to the form's background color and its text color to white
                    clicked_button.BackColor = this.BackColor;
                    clicked_button.ForeColor = Color.White;
                }
            }

            // Check if the custom date button is clicked
            if (btn == button_custom_date)
            {
                // If so, change the text color of the 'from', 'to', 'start mask' and 'end mask' labels to (167, 209, 41)
                label_from.ForeColor = Color.FromArgb(167, 209, 41);
                label_to.ForeColor = Color.FromArgb(167, 209, 41);
                label_start_mask.ForeColor = Color.FromArgb(167, 209, 41);
                label_end_mask.ForeColor = Color.FromArgb(167, 209, 41);
            }
            else // If any other button is clicked
            {
                // Revert the text color of the 'from', 'to', 'start mask' and 'end mask' labels to their original color (147, 168, 87)
                label_from.ForeColor = Color.FromArgb(147, 168, 87);
                label_to.ForeColor = Color.FromArgb(147, 168, 87);
                label_start_mask.ForeColor = Color.FromArgb(147, 168, 87);
                label_end_mask.ForeColor = Color.FromArgb(147, 168, 87);
            }

            // Store the reference to the clicked button for future color change when other buttons are clicked
            clicked_button = btn;
        }

        // Disable the ability to select custom dates
        private void Disable_Custom_Dates()
        {
            // Disable date time picker
            date_time_picker_start.Enabled = false;
            date_time_picker_end.Enabled = false;

            // Disable the set button and make it not visible
            button_set_dates.Enabled = false;
            button_set_dates.Visible = false;

            // Make the cursor default on the label masks
            label_start_mask.Cursor = Cursors.Default;
            label_end_mask.Cursor = Cursors.Default;

            // Make it visible and Enable the previous button
            button_previous.Enabled = true;
            button_previous.Visible = true;
        }

        // Enable the ability to select custom dates
        private void Enale_Custom_Dates()
        {
            // Enable date time picker
            date_time_picker_start.Enabled = true;
            date_time_picker_end.Enabled = true;

            // Enable the set button and make it visible
            button_set_dates.Enabled = true;
            button_set_dates.Visible = true;

            // Make the cursor a hand on the label masks
            label_start_mask.Cursor = Cursors.Hand;
            label_end_mask.Cursor = Cursors.Hand;

            // Hide and disable the previous button
            button_previous.Enabled = false;
            button_previous.Visible = false;
        }

        // Event handler for when "Today" button is clicked
        private async void Button_Today_Click(object sender, EventArgs e)
        {
            // Set date range for previous date
            date_range = 1;

            // Pick the date for the current day
            date_time_picker_start.Value = DateTime.Today;
            date_time_picker_end.Value = DateTime.Now;

            // UI changes
            Disable_Custom_Dates();
            Set_Button_Color(sender);

            // Load the data
            await Load_Data_On_Dashboard();
        }

        // Event handler for when "Last 7 Days" button is clicked
        private async void Button_Last_7_Days_Click(object sender, EventArgs e)
        {
            // Set date range for previous date
            date_range = 7;

            // Pick the date between this day and the last 7 days
            date_time_picker_start.Value = DateTime.Today.AddDays(-7);
            date_time_picker_end.Value = DateTime.Now;

            // UI changes
            Disable_Custom_Dates();
            Set_Button_Color(sender);

            // Load the data
            await Load_Data_On_Dashboard();
        }

        // Event handler for when "Last 30 Days" button is clicked
        private async void Button_Last_30_Days_Click(object sender, EventArgs e)
        {
            // Set date range for previous date
            date_range = 30;

            // Pick the date between this day and the last 30 days
            date_time_picker_start.Value = DateTime.Today.AddDays(-30);
            date_time_picker_end.Value = DateTime.Now;

            // UI changes
            Disable_Custom_Dates();
            Set_Button_Color(sender);

            // Load the data
            await Load_Data_On_Dashboard();
        }

        // Event handler for when "This Month" button is clicked
        private async void Button_This_Month_Click(object sender, EventArgs e)
        {
            // Set date range for previous date
            date_range = DateTime.DaysInMonth(DateTime.Today.Year, DateTime.Today.Month);

            // Pick the date from this month to the current day
            date_time_picker_start.Value = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            date_time_picker_end.Value = DateTime.Now;

            // UI changes
            Disable_Custom_Dates();
            Set_Button_Color(sender);

            // Load the data
            await Load_Data_On_Dashboard();
        }

        // Event handler for when "Custom Date" button is clicked we enable the custom dates everywhere else for when the other buttons are click we disable them
        private void Button_Custom_Date_Click(object sender, EventArgs e)
        {
            Set_Button_Color(sender);
            Enale_Custom_Dates();
        }

        // Event handler for when "Set Dates" button is clicked
        private async void Button_Set_Dates_Click(object sender, EventArgs e)
        {
            // UI changes
            Set_Button_Color(sender);

            // Load the data
            await Load_Data_On_Dashboard();
        }

        // Event handler for when "Start Mask" label is clicked
        private void Label_Start_Mask_Click(object sender, EventArgs e)
        {
            // When we click on the mask select the element below it aka here we select the date time picker underneath it
            if (clicked_button == button_custom_date)
            {
                date_time_picker_start.Select();
                SendKeys.Send("%{DOWN}");
            }
        }

        // Event handler for when "End Mask" label is clicked
        private void Label_End_Mask_Click(object sender, EventArgs e)
        {
            // When we click on the mask select the element below it aka here we select the date time picker underneath it
            if (clicked_button == button_custom_date)
            {
                date_time_picker_end.Select();
                SendKeys.Send("%{DOWN}");
            }
        }

        // Event handler for when Date time Start value is changed
        private void Date_Time_Picker_Start_ValueChanged(object sender, EventArgs e)
        {
            // Update the label start mask text
            label_start_mask.Text = date_time_picker_start.Text;
        }

        // Event handler for when Date time End value is changed
        private void Date_Time_Picker_End_ValueChanged(object sender, EventArgs e)
        {
            // Update the label start mask text
            label_end_mask.Text = date_time_picker_end.Text;
        }

        // Event handler for when "Previous" button is clicked to load the data previous of the current selected date to see what it was before.
        // Example If button Today is select and we click on previous we will get the data from yesterday.
        private async void Button_Previous_Click(object sender, EventArgs e)
        {
            // Save current dates
            DateTime current_start_date = date_time_picker_start.Value;
            DateTime current_end_date = date_time_picker_end.Value;

            // Set the previous dates to the date pickers
            date_time_picker_start.Value = current_start_date.AddDays(-date_range);
            date_time_picker_end.Value = current_end_date.AddDays(-date_range);

            // Load the dashboard data for the previous dates
            await Load_Data_On_Dashboard();
        }

        // Event handler for when the form loads
        private void Form1_Load(object sender, EventArgs e)
        {
            // Update the label start and end masks texts
            label_start_mask.Text = date_time_picker_start.Text;
            label_end_mask.Text = date_time_picker_end.Text;
        }

        // Link myself
        private void LinkLabel_Me_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ProcessStartInfo psi = new()
            {
                FileName = "https://github.com/PinkFlamingoz",
                UseShellExecute = true
            };
            Process.Start(psi);
        }
    }
}